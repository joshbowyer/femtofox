#!/bin/bash
# prevents weirdness over tty
export NCURSES_NO_UTF8_ACS=1
export TERM=screen
export LANG=C.UTF-8

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root."
  echo "Try \`sudo femto-config\`."
  exit 1
fi

# pause
pause() {
  echo "Press any key to continue..."
  read -n 1 -s -r
}

# Dialog uses a different method to display colors, and is limited to only these 8.
replace_colors() {
  input="$1"
  input="${input//$(echo -e '\033[0;30m')/\\Z0}"   # black
  input="${input//$(echo -e '\033[0;31m')/\\Z1}"   # red
  input="${input//$(echo -e '\033[0;32m')/\\Z2}"   # green
  input="${input//$(echo -e '\033[0;33m')/\\Z3}"   # yellow
  input="${input//$(echo -e '\033[0;34m')/\\Z4}"   # blue
  input="${input//$(echo -e '\033[0;35m')/\\Z5}"   # magenta
  input="${input//$(echo -e '\033[0;36m')/\\Z6}"   # cyan
  input="${input//$(echo -e '\033[0;37m')/\\Z7}"   # white
  input="${input//$(echo -e '\033[7m')/\\Zr}"      # invert
  input="${input//$(echo -e '\033[4m')/\\Zu}"      # underline
  input="${input//$(echo -e '\033[0m')/\\Zn}"      # reset
  echo "$input"
}

wifi_config() {
  local wifi_ssid=""
  local wifi_psk=""
  local wifi_country=""
  wifi_ssid=$(dialog --title "$title2" --inputbox "Enter Wi-Fi SSID:" 8 40 "$(grep -oP '^ *ssid="\K[^"]+' /etc/wpa_supplicant/wpa_supplicant.conf)" 3>&1 1>&2 2>&3) # display current SSID
  wifi_psk=$(dialog --title "$title2" --inputbox "Enter Wi-Fi Password:" 8 40 3>&1 1>&2 2>&3)
  wifi_country=$(dialog --title "$title2" --inputbox "Enter Country Code (US, DE...):" 8 40 "$(grep -oP '^ *country=\K[^ ]+' /etc/wpa_supplicant/wpa_supplicant.conf)" 3>&1 1>&2 2>&3) # display current country
  cmd="femto-network-config.sh -s \"$wifi_ssid\" -p \"$wifi_psk\""
  [ -n "$wifi_country" ] && cmd="$cmd -c \"$wifi_country\""
  cmd="$cmd -r"
  if [ -z "$wifi_ssid" ]; then
    dialog --title "$title2" --msgbox "\nSSID is required to configure Wi-Fi." 8 40
    return
  fi
  eval $cmd
  dialog --title "$title2" --msgbox "Wi-Fi Settings Saved:\nSSID: $wifi_ssid\nPassword: (hidden)\nCountry: $wifi_country\nMeshtastic Wi-Fi setting set to ON" 9 40
  if [ "$1" = "-w" ]; then
    exit 0
  fi
}

# Function to handle Wi-Fi settings
networking_settings() {
  local title="Networking"
  local title2="Wi-Fi (wlan0) Settings"
  wpa_supplicant_conf="/etc/wpa_supplicant/wpa_supplicant.conf"
  while true; do
    local option=""
    option=$(dialog --cancel-label "Back" --menu "$title" 16 40 4 \
      1 "Turn Wi-Fi on/off" \
      2 "View Wi-Fi settings" \
      3 "Change Wi-Fi settings" \
      4 "View ethernet settings" \
      5 "Restart networking" \
      6 "Set hostname" \
      7 "Test internet connection" \
      "" "" \
    8 "Back to Main Menu" 3>&1 1>&2 2>&3)
    
    exit_status=$? # This line checks the exit status of the dialog command
    if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
      break
    fi
    
    case $option in
      1) # Turn Wi-Fi on/off)
        if ! ip link show wlan0 &>/dev/null; then
          dialog --colors --msgbox "\Z1Network adapter wlan0 does not exist.\Zn\n\nIs a wifi adapter connected?" 8 40
        else
          while true; do
            choice=$(dialog --cancel-label "Back" --title "Enable/disable Wi-Fi" --menu "Tip: Wi-Fi can also be toggled by short-pressing the BOOT button on the Luckfox." 11 50 5 \
              1 "Turn Wi-Fi on" \
              2 "Turn Wi-Fi off" 3>&1 1>&2 2>&3)
            exit_status=$? # This line checks the exit status of the dialog command
            if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
              break
            fi
            case $choice in
              1) femto-network-config.sh -x "up" && break ;;
              2) femto-network-config.sh -x "down" && break ;;
            esac
          done
        fi
      ;;
      2) # View Wi-Fi settings)
        echo "Getting Wi-Fi configuration..."
        dialog --title "$title2" --colors --msgbox "$(replace_colors "$(femto-network-config.sh -w)")" 0 0
      ;;
      3) # Change Wi-Fi settings)
        wifi_config
      ;;
      4) # View ethernet settings)
        echo "Getting ethernet configuration..."
        dialog --title "Ethernet (eth0) settings" --colors --msgbox "$(replace_colors "$(femto-network-config.sh -e)")" 0 0
      ;;
      5) # Restart networking)
        dialog --title "$title2" --yesno "Wi-Fi and Ethernet will be restarted.\nMeshtastic Wi-Fi setting will be set to ON.\n\nProceed?" 10 40
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-network-config.sh -r
        fi
      ;;
      6) # set hostname)
        new_hostname=$(dialog --title "$title" --inputbox "Enter new hostname:" 8 40 $(hostname) 3>&1 1>&2 2>&3)
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-network-config.sh -n "$new_hostname"
          dialog --title "$title" --msgbox "Femtofox is now reachable at\n$new_hostname.local" 8 40
        fi
      ;;
      7) # Test internet connection)
        dialog --infobox "Testing internet connection..." 5 45
        dialog --title "Internet connectivity test" --colors --msgbox "$(replace_colors "$(femto-network-config.sh -t)")" 8 40
      ;;
      8)
        return
      ;;
    esac
  done
}

  # Pinout menu
femto_pinouts() {
  while true; do
    local option=""
    option=$(dialog --cancel-label "Back" --menu "Pinouts" 15 40 5 \
      1 "Femtofox" \
      2 "Femtofox Zero" \
      3 "Femtofox Tiny" \
      4 "Luckfox Pico Mini" \
      "" "" \
      5 "Back to Help Menu" 3>&1 1>&2 2>&3)
    
    exit_status=$? # This line checks the exit status of the dialog command
    
    if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
      break
    fi
    
    case $option in
      1) dialog --title "Femtofox" --msgbox "$(femto-pinout.sh -f)" 41 70 ;;
      2) dialog --title "Femtofox Zero" --msgbox "$(femto-pinout.sh -z)" 34 48 ;;
      3) dialog --title "Femtofox Tiny" --msgbox "$(femto-pinout.sh -t)" 38 70 ;;
      4) dialog --title "Luckfox Pico Mini" --msgbox "$(femto-pinout.sh -l)" 23 65 ;;
      5) return ;;
    esac
  done
}

# Function to handle misc settings
utilities() {
  local title="Utilities"
  while true; do
    local option=""
    option=$(dialog --cancel-label "Back" --menu "$title" 15 40 4 \
      1 "Set system timezone" \
      2 "Kernel modules" \
      3 "Re-run first-boot script" \
      4 "Run USB configuration tool" \
      5 "Run OEM luckfox-config" \
      6 "Reboot" \
      "" "" \
      7 "Back to Main Menu" 3>&1 1>&2 2>&3)
    
    exit_status=$? # This line checks the exit status of the dialog command
    if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
      break
    fi
    
    case $option in
      1) femto-set-timezone.sh ;; # set timezone)
      2) # Kernel modules)
        dialog --title "$title" --msgbox "Kernel modules are loadable pieces of code that extend a Linux kernel's functionality without requiring a reboot. Common examples include device drivers, file systems, or system calls.\n\nThis tool will allow you to add pre-compiled modules to the Foxbuntu kernel.\n\nModules currently autostarting at boot:\n$(sed -n '6,$p' /etc/modules | sed ':a;N;$!ba;s/\n/, /g;s/, $//')" 16 65
        femto-kernel-modules.sh
      ;;
      3) femto-runonce.sh ;; # Re-run first-boot script)
      4) # USB config)
        dialog --title "$title" --yesno "The USB configuration tool allows you to set critical Femtofox settings with a text file on a USB flash drive.\n\nFor more information, visit\ngithub.com/noon92/femtofox/blob/main/usb_config.md\n\nThis tool is run automatically at boot.\n\nRun now?" 14 60
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-usb-config-tool.sh
          pause
        fi
      ;;
      5) luckfox-config ;;
      6) 
        dialog --title "$title" --yesno "Reboot now?\n\nTip: Reboot can also be triggered by long-pressing the BOOT button on the luckfox." 10 45
        if [ $? -eq 0 ]; then #unless cancel/no
          dialog --infobox "Rebooting..." 5 45
          reboot
        fi
      ;;
      7) return ;;
    esac
  done
}

#set lora radio
set_lora_radio() {
  while true; do
    local option=""
    option=$(dialog --menu "Select your installed Meshtastic LoRa radio." 0 0 10 \
      1 "ebyte-e22-900m30s (Femtofox Pro)" \
      2 "ebyte-e22-900m22s" \
      3 "ebyte-e80-900m22s" \
      4 "heltec-ht-ra62" \
      5 "seeed-wio-sx1262" \
      6 "waveshare-sx126x-xxxm" \
      7 "ai-thinker-ra-01sh" \
      8 "sx1262_tcxo" \
      9 "sx1262_xtal" \
      10 "lr1121_tcxo" \
      11 "none (simulated radio)" \
      "" "" \
    12 "Skip" 3>&1 1>&2 2>&3)
    
    exit_status=$? # This line checks the exit status of the dialog command
    if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
      break
    fi
    
    local radio=""
    case $option in
      1)
        radio="sx1262_tcxo"
      ;;
      2)
        radio="sx1262_tcxo"
      ;;
      3)
        radio="sx1262_xtal"
      ;;
      4)
        radio="sx1262_tcxo"
      ;;
      5)
        radio="sx1262_tcxo"
      ;;
      6)
        radio="sx1262_xtal"
      ;;
      7)
        radio="sx1262_xtal"
      ;;
      8)
        radio="sx1262_tcxo"
      ;;
      9)
        radio="sx1262_xtal"
      ;;
      10)
        radio="lr1121_tcxo"
      ;;
      11)
        radio="none"
      ;;
      12)
        return
      ;;
    esac
    if [ -n "$radio" ]; then #if a radio was selected
      femto-meshtasticd-config.sh -l "$radio" -s # set the radio, then restart meshtasticd
      return
    fi
  done
}

# Function to handle Meshtasticd settings
meshtasticd_settings() {
  local title="Meshtastic Settings"
  while true; do
    if echo "$(systemctl status meshtasticd)" | grep -q "active (running)"; then
      local service_state="\Z2\Zuonline\Zn"
    elif echo "$(systemctl status meshtasticd)" | grep -q "inactive (dead)"; then
      local service_state="\Z1\Zuoffline\Zn"
    else
      local service_state="unknown"
    fi
    local option=""
    option=$(dialog --colors --title "$title" --cancel-label "Back" --menu "Meshtasticd service is $service_state$(femto-meshtasticd-config.sh -k | grep -q 'simulated' && echo '\n\Z1Using simulated radio\Zn')" 23 50 4 \
      1 "View configuration URL & QR code" \
      2 "Set new configuration URL" \
      3 "View lora radio selection" \
      4 "Set LoRa radio" \
      5 "View admin keys" \
      6 "Set admin key" \
      7 "Clear admin keys" \
      8 "Legacy admin channel" \
      9 "Detailed Meshtasticd service status" \
      10 "Mesh connectivity test" \
      11 "Start/restart Meshtasticd service" \
      12 "Stop Meshtasticd service" \
      13 "Upgrade/install Meshtasticd" \
      14 "Uninstall Meshtasticd" \
      "" "" \
    15 "Back to Main Menu" 3>&1 1>&2 2>&3)
    
    exit_status=$? # This line checks the exit status of the dialog command
    if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
      break
    fi
    
    case $option in
      1) #Get current configuration URL & QR code)
        dialog --infobox "Getting Meshtastic QR code and URL..." 5 45
        femto-meshtasticd-config.sh -g
        pause
      ;;
      2)
        newurl=$(dialog --title "Meshtastic URL" --inputbox "New Meshtasticd URL (SHIFT+INS to paste):" 8 60 3>&1 1>&2 2>&3)
        if [ -n "$newurl" ]; then #if a URL was entered
          dialog --title "$title" --yesno "New Meshtasticd URL:\n$newurl\n\nConfirm?" 15 60
          if [ $? -eq 0 ]; then #unless cancel/no
            femto-meshtasticd-config.sh -q "$newurl"
            pause
          fi
        fi
      ;;
      3)
        dialog --colors --title "LoRa radio" --msgbox "Currently configured LoRa radio: $(replace_colors "$(femto-meshtasticd-config.sh -k)")" 6 40
      ;;
      4)
        set_lora_radio
      ;;
      5)
        dialog --infobox "Getting admin keys..." 5 45
        dialog --title "Admin keys" --msgbox "Up to 3 admin keys are permitted, more will be ignored.\n\nKeys:$(femto-meshtasticd-config.sh -v | tail -n 1 | sed 's/|n/\\n/g')" 0 0
      ;;
      6) #set admin key)
        key=$(dialog --title "Meshtastic Admin Key" --inputbox "Meshtastic admin key - up to 3, more will be ignored.\n\n(SHIFT+INS to paste):" 11 40 3>&1 1>&2 2>&3)
        if [ -n "$key" ]; then #if a URL was entered
          femto-meshtasticd-config.sh -a "$key"
          pause
        fi
      ;;
      7)
        dialog --title "$title" --yesno "Meshtasticd can have up to 3 admin keys.\nClear admin key list?" 0 0
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-meshtasticd-config.sh -c
          pause
        fi
      ;;
      8) #legacy admin)
        dialog --infobox "Getting current legacy admin state..." 5 45
        state=$(sudo femto-meshtasticd-config.sh -p)
        if echo "$state" | grep -q "True"; then
          state="Enabled"
        elif echo "$state" | grep -q "False"; then
          state="Disabled"
        elif echo "$state" | grep -q "Error"; then
          state="Error"
        fi
        while true; do
          choice=$(dialog --title "Meshtasticd Legacy Admin" --menu "Current state: $state" 10 40 5 \
            1 "Enable" \
            2 "Disable" 3>&1 1>&2 2>&3)
          exit_status=$? # This line checks the exit status of the dialog command
          if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
            break
          fi
          case $choice in
            1) femto-meshtasticd-config.sh -o "true" && break ;;
            2) femto-meshtasticd-config.sh -o "false" && break ;;
          esac
        done
      ;;
      9) #check meshtasticd service status)
        dialog --infobox "Getting Meshtasticd service status..." 5 45
        dialog --title "Meshtasticd service status" --msgbox "$(systemctl status meshtasticd)" 0 0
      ;;
      10) #test mesh connectivity)
        dialog --title "Meshtastic connectivity test" --yesno "Will send \"test\" to channel 0 and wait for acknowledgement. Will try up to 3 times.\n\nPerform test?" 10 45
        if [ $? -eq 0 ]; then #unless cancel/no
          dialog --infobox "Performing mesh connectivity test.\n\nThis may take a while..." 6 45
          dialog --title "Meshtasticd service status" --msgbox "$(femto-meshtasticd-config.sh -r)" 0 0
        fi
      ;;
      11) #start/restart meshtasticd)
        dialog --title "$title" --yesno "Start/restart Meshtasticd service?" 5 45
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-meshtasticd-config.sh -s
          dialog --msgbox "Meshtasticd service started/restarted." 5 45
        fi
      ;;
      12) #stop meshtasticd)
        dialog --title "$title" --yesno "Stop Meshtasticd service?" 5 45
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-meshtasticd-config.sh -t
          dialog --msgbox "Meshtasticd service stopped." 5 45
        fi
      ;;
      13) #Upgrade meshtasticd)
        dialog --title "$title" --yesno "Upgrade Meshtasticd?\nRequires internet connection." 0 0
        if [ $? -eq 0 ]; then #unless cancel/no
          femto-meshtasticd-config.sh -u
          pause
        fi
      ;;
      14) #uninstall meshtasticd)
        dialog --title "$title" --yesno "Uninstall Meshtasticd?\n\nFoxbuntu was designed with Meshtasticd integration in mind, and may behave unexpectedly if Meshtasticd is removed." 0 0
        if [ $? -eq 0 ]; then
          femto-meshtasticd-config.sh -x
          dialog --msgbox "Meshtasticd uninstalled. To purge all remnants, run \`sudo apt purge\`.\nAfter reinstallation but before first launch, run the \"first boot script\" from the misc menu." 8 40
        fi
      ;;
      15)
        return
      ;;
    esac
  done
}

#Help menu
help_menu() {
  while true; do
  local title="Help / About"
    local option=""
    option=$(dialog --cancel-label "Back" --menu "$title" 0 0 7 \
      1 "About Femtofox" \
      2 "Display pinout" \
      3 "Femtofox licensing info - short" \
      4 "Femtofox licensing info - long" \
      5 "Meshtastic licensing info" \
      6 "About Luckfox" \
      7 "About Ubuntu" \
      "" "" \
    8 "Back to Main Menu" 3>&1 1>&2 2>&3)
    
    exit_status=$? # This line checks the exit status of the dialog command
    if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
      break
    fi
    
    case $option in
      1) #About Femtofox)
        dialog --title "About Femtofox" --backtitle "Foxbuntu $(grep -oP 'major=\K[0-9]+' /etc/foxbuntu-release).$(grep -oP 'minor=\K[0-9]+' /etc/foxbuntu-release).$(grep -oP 'patch=\K[0-9]+' /etc/foxbuntu-release)$(grep -oP 'hotfix=\K[a-z]+' /etc/foxbuntu-release)" --msgbox "$(femto-license.sh -a)" 18 65
      ;;
      2) #Display pinout)
        femto_pinouts
      ;;
      3) #Femtofox licensing info - short)
        dialog --title "Femtofox license" --msgbox "$(femto-license.sh -f)" 28 60
      ;;
      4) #Femtofox licensing info - long)
        clear
        femto-license.sh -F
        pause
      ;;
      5) #Meshtastic licensing info)
        dialog --title "Meshtastic license" --msgbox "$(femto-license.sh -m)" 0 0
      ;;
      6) #About Luckfox)
        dialog --title "About Luckfox" --msgbox "$(femto-license.sh -l)" 0 0
      ;;
      7) #About Ubuntu)
        dialog --title "About Ubuntu" --msgbox "$(femto-license.sh -u)" 0 0
      ;;
      8)
        return
      ;;
    esac
  done
}

# Parse options
while getopts ":hlw" opt; do
  case ${opt} in
    h)
      echo -e "If script is run without arguments, the main femto-config UI will load.\n\
Options are:\n\
-h          This message\n\
-l          Set LoRa radio model menu\n\
-w          Set Wi-Fi config menu"
      ;;
    l) # Option -l (set lora radio)
      set_lora_radio
    ;;
    w) # Option -w (Wi-Fi config)
      wifi_config
    ;;
  esac
done
if [ -n "$1" ]; then
  exit
fi
# Main menu
while true; do
  choice=$(dialog --title "$(date)" --cancel-label "Exit" --menu "Femtofox Config" 15 40 5 \
    1 "Settings wizard" \
    2 "Networking" \
    3 "Meshtasticd" \
    4 "Software" \
    5 "Utilities" \
    6 "Help" \
    "" "" \
    7 "Exit" 3>&1 1>&2 2>&3)
  
  exit_status=$? # This line checks the exit status of the dialog command
  
  if [ $exit_status -ne 0 ]; then # Exit the loop if the user selects "Cancel" or closes the dialog
    break
  fi
  
  case $choice in
    1) femto-install-wizard.sh ;;
    2) networking_settings ;;
    3) meshtasticd_settings ;;
    4) femto-software.sh ;;
    5) utilities ;;
    6) help_menu ;;
    7) break ;;
  esac
done

exit 0